diff --git a/cross-android-arm64-v8a b/cross-android-arm64-v8a
new file mode 100644
index 00000000000..34bcd93db78
--- /dev/null
+++ b/cross-android-arm64-v8a
@@ -0,0 +1,14 @@
+[binaries]
+ar = '{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar'
+c = ['ccache', '{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/{TARGET_TRIPLE}{ANDROID_API_LEVEL}-clang']
+cpp = ['ccache', '{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/{TARGET_TRIPLE}{ANDROID_API_LEVEL}-clang++', '-fno-exceptions', '-fno-unwind-tables', '-fno-asynchronous-unwind-tables', '--start-no-unused-arguments', '-static-libstdc++', '--end-no-unused-arguments']
+c_ld = 'lld'
+cpp_ld = 'lld'
+strip = '{ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip'
+pkg-config = ['env', 'PKG_CONFIG_LIBDIR={ANDROID_NDK_HOME}/pkgconfig', '/usr/bin/pkg-config']
+
+[host_machine]
+system = 'android'
+cpu_family = 'aarch64'
+cpu = 'armv8'
+endian = 'little'
diff --git a/include/GL/zfa.h b/include/GL/zfa.h
new file mode 100644
index 00000000000..d5865bedc34
--- /dev/null
+++ b/include/GL/zfa.h
@@ -0,0 +1,31 @@
+#ifndef ZFA_H
+#define ZFA_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+#include "gl.h"
+
+typedef struct zfa_context* ZFAContext;
+
+GLAPI ZFAContext GLAPIENTRY
+zfaCreateContext(GLint depth_bits, GLint stencil_bits,
+                          bool api_compat, GLint version_major, GLint version_minor);
+
+GLAPI void GLAPIENTRY
+zfaDestroyContext(ZFAContext zfa);
+
+GLAPI GLboolean GLAPIENTRY
+zfaMakeCurrent(ZFAContext zfa, struct ANativeWindow *native_window, GLsizei width, GLsizei height);
+
+GLAPI void GLAPIENTRY
+zfaSwapBuffers(void);
+
+GLAPI void GLAPIENTRY
+zfaFlushFront(void);
+
+#ifdef __cplusplus
+  }
+#endif
+
+#endif //ZFA_H
diff --git a/meson.build b/meson.build
index 095aec5d9ea..be41db38d4c 100644
--- a/meson.build
+++ b/meson.build
@@ -90,6 +90,8 @@ if with_tools.contains('all')
   ]
 endif
 
+with_zfa = get_option('zfa')
+
 with_any_vulkan_layers = get_option('vulkan-layers').length() != 0
 with_intel_tools = with_tools.contains('intel') or with_tools.contains('intel-ui')
 with_imgui = with_intel_tools or with_vulkan_overlay_layer
@@ -2038,9 +2040,9 @@ if dep_unwind.found()
 endif
 
 if with_osmesa
-  if not with_gallium_swrast
-    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
-  endif
+#  if not with_gallium_swrast
+#    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
+#  endif
   if host_machine.system() == 'windows'
     osmesa_lib_name = 'osmesa'
   else
diff --git a/meson_options.txt b/meson_options.txt
index 0147cafcb14..b2901fe8ba1 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -517,6 +517,13 @@ option(
   description : 'Build OSmesa.'
 )
 
+option(
+  'zfa',
+  type : 'boolean',
+  value : false,
+  description : 'Build zfa (simple gallium zink frontend for android).'
+)
+
 option(
   'tools',
   type : 'array',
diff --git a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
index ddb67b3a25a..98805d28d67 100644
--- a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
@@ -7,6 +7,9 @@
 #include "util/u_debug.h"
 #include "frontend/sw_winsys.h"
 #include "target-helpers/inline_debug_helper.h"
+#ifdef GALLIUM_ZINK
+#include "zink/zink_public.h"
+#endif
 
 /* Helper function to choose and instantiate one of the software rasterizers:
  * llvmpipe, softpipe.
diff --git a/src/gallium/drivers/zink/zink_instance.py b/src/gallium/drivers/zink/zink_instance.py
index 00cdc8eeb67..16570ebe7cc 100644
--- a/src/gallium/drivers/zink/zink_instance.py
+++ b/src/gallium/drivers/zink/zink_instance.py
@@ -47,6 +47,7 @@ EXTENSIONS = [
     Extension("VK_KHR_wayland_surface"),
     Extension("VK_KHR_xcb_surface"),
     Extension("VK_KHR_win32_surface"),
+    Extension("VK_KHR_android_surface"),
 ]
 
 if platform.system() == "Darwin":
diff --git a/src/gallium/drivers/zink/zink_kopper.c b/src/gallium/drivers/zink/zink_kopper.c
index ef04ea1628c..ea0ae6cf744 100644
--- a/src/gallium/drivers/zink/zink_kopper.c
+++ b/src/gallium/drivers/zink/zink_kopper.c
@@ -69,6 +69,11 @@ init_dt_type(struct kopper_displaytarget *cdt)
    case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR:
       cdt->type = KOPPER_WIN32;
       break;
+#endif
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+   case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
+      cdt->type = KOPPER_ANDROID;
+      break;
 #endif
    default:
       unreachable("unsupported!");
@@ -108,6 +113,13 @@ kopper_CreateSurface(struct zink_screen *screen, struct kopper_displaytarget *cd
       error = VKSCR(CreateWin32SurfaceKHR)(screen->instance, win32, NULL, &surface);
       break;
    }
+#endif
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+      case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: {
+      VkAndroidSurfaceCreateInfoKHR *android = (VkAndroidSurfaceCreateInfoKHR *)&cdt->info.bos;
+      error = VKSCR(CreateAndroidSurfaceKHR)(screen->instance, android, NULL, &surface);
+      break;
+   }
 #endif
    default:
       unreachable("unsupported!");
@@ -218,6 +230,13 @@ find_dt_entry(struct zink_screen *screen, const struct kopper_displaytarget *cdt
       he = _mesa_hash_table_search(&screen->dts, win32->hwnd);
       break;
    }
+#endif
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+      case KOPPER_ANDROID: {
+      VkAndroidSurfaceCreateInfoKHR *android = (VkAndroidSurfaceCreateInfoKHR *)&cdt->info.bos;
+      he = _mesa_hash_table_search(&screen->dts, android->window);
+      break;
+   }
 #endif
    default:
       unreachable("unsupported!");
@@ -321,6 +340,10 @@ kopper_CreateSwapchain(struct zink_screen *screen, struct kopper_displaytarget *
       cswap->scci.imageExtent.width = w;
       cswap->scci.imageExtent.height = h;
       break;
+   case KOPPER_ANDROID:
+       cswap->scci.imageExtent.width = cdt->caps.currentExtent.width;
+       cswap->scci.imageExtent.height = cdt->caps.currentExtent.height;
+      break;
    default:
       unreachable("unknown display platform");
    }
@@ -423,6 +446,7 @@ zink_kopper_displaytarget_create(struct zink_screen *screen, unsigned tex_usage,
             break;
          case KOPPER_WAYLAND:
          case KOPPER_WIN32:
+         case KOPPER_ANDROID:
             _mesa_hash_table_init(&screen->dts, screen, _mesa_hash_pointer, _mesa_key_pointer_equal);
             break;
          default:
@@ -494,6 +518,13 @@ zink_kopper_displaytarget_create(struct zink_screen *screen, unsigned tex_usage,
       _mesa_hash_table_insert(&screen->dts, win32->hwnd, cdt);
       break;
    }
+#endif
+#ifdef VK_USE_PLATFORM_ANDROID_KHR
+   case KOPPER_ANDROID: {
+      VkAndroidSurfaceCreateInfoKHR *android = (VkAndroidSurfaceCreateInfoKHR *)&cdt->info.bos;
+      _mesa_hash_table_insert(&screen->dts, android->window, cdt);
+      break;
+   }
 #endif
    default:
       unreachable("unsupported!");
diff --git a/src/gallium/drivers/zink/zink_kopper.h b/src/gallium/drivers/zink/zink_kopper.h
index e1d18ae7ef7..f29e2a3527d 100644
--- a/src/gallium/drivers/zink/zink_kopper.h
+++ b/src/gallium/drivers/zink/zink_kopper.h
@@ -71,7 +71,8 @@ struct kopper_swapchain {
 enum kopper_type {
    KOPPER_X11,
    KOPPER_WAYLAND,
-   KOPPER_WIN32
+   KOPPER_WIN32,
+   KOPPER_ANDROID
 };
 
 struct kopper_displaytarget
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index bc0cc58d2b9..1f5487c8493 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -306,9 +306,11 @@ disk_cache_init(struct zink_screen *screen)
    /* Hash in the zink driver build. */
    const struct build_id_note *note =
        build_id_find_nhdr_for_addr(disk_cache_init);
-   unsigned build_id_len = build_id_length(note);
-   assert(note && build_id_len == 20); /* blake3 */
-   _mesa_blake3_update(&ctx, build_id_data(note), build_id_len);
+   if (note != NULL) {
+      unsigned build_id_len = build_id_length(note);
+      assert(note && build_id_len == 20); /* blake3 */
+      _mesa_blake3_update(&ctx, build_id_data(note), build_id_len);
+   }
 #endif
 
    /* Hash in the Vulkan pipeline cache UUID to identify the combination of
@@ -1968,21 +1970,25 @@ check_have_device_time(struct zink_screen *screen)
 static void
 zink_error(const char *msg)
 {
+   mesa_log(MESA_LOG_ERROR, "zink", "%s\n", msg);
 }
 
 static void
 zink_warn(const char *msg)
 {
+   mesa_log(MESA_LOG_WARN, "zink", "%s\n", msg);
 }
 
 static void
 zink_info(const char *msg)
 {
+   mesa_log(MESA_LOG_INFO, "zink", "%s\n", msg);
 }
 
 static void
 zink_msg(const char *msg)
 {
+   mesa_log(MESA_LOG_DEBUG, "zink", "%s\n", msg);
 }
 
 static VKAPI_ATTR VkBool32 VKAPI_CALL
@@ -3324,14 +3330,14 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
       goto fail;
    }
 
-   if (config) {
+   /*if (config) {
       driParseConfigFiles(config->options, config->options_info, 0, "zink",
                           NULL, NULL, NULL, 0, NULL, 0);
       screen->driconf.dual_color_blend_by_location = driQueryOptionb(config->options, "dual_color_blend_by_location");
       //screen->driconf.inline_uniforms = driQueryOptionb(config->options, "radeonsi_inline_uniforms");
       screen->driconf.emulate_point_smooth = driQueryOptionb(config->options, "zink_emulate_point_smooth");
       screen->driconf.zink_shader_object_enable = driQueryOptionb(config->options, "zink_shader_object_enable");
-   }
+   }*/
 
    simple_mtx_lock(&instance_lock);
    if (++instance_refcount == 1) {
diff --git a/src/gallium/frontends/dri/meson.build b/src/gallium/frontends/dri/meson.build
index a98c8c0a903..b36137cb7bd 100644
--- a/src/gallium/frontends/dri/meson.build
+++ b/src/gallium/frontends/dri/meson.build
@@ -37,7 +37,7 @@ if with_dri2
 endif
 
 libdri_c_args = []
-if with_gallium_zink and not with_platform_android
+if with_gallium_zink #and not with_platform_android
   if with_glvnd
     libdri_c_args += '-DKOPPER_LIB_NAMES="libEGL_@0@ and libGLX_@0@"'.format(glvnd_vendor_name)
   else
diff --git a/src/gallium/frontends/zfa/meson.build b/src/gallium/frontends/zfa/meson.build
new file mode 100644
index 00000000000..834f903629c
--- /dev/null
+++ b/src/gallium/frontends/zfa/meson.build
@@ -0,0 +1,11 @@
+zfa_st_c_args = []
+
+libzfa_st = static_library(
+    'zfa_st',
+    'zfa.c',
+    c_args : zfa_st_c_args,
+    include_directories : [
+        inc_include, inc_src, inc_gallium, inc_gallium_aux, inc_mapi, inc_mesa,
+    ],
+    dependencies : [idep_mesautil],
+)
\ No newline at end of file
diff --git a/src/gallium/frontends/zfa/zfa.c b/src/gallium/frontends/zfa/zfa.c
new file mode 100644
index 00000000000..56c794283c0
--- /dev/null
+++ b/src/gallium/frontends/zfa/zfa.c
@@ -0,0 +1,335 @@
+
+#include <kopper_interface.h>
+#include <vulkan/vulkan_android.h>
+#include "GL/zfa.h"
+
+#include <threads.h>
+#include <frontend/api.h>
+#include <gallium/drivers/zink/zink_public.h>
+#include <pipe/p_defines.h>
+#include <state_tracker/st_context.h>
+
+#include <util/log.h>
+#include <util/u_inlines.h>
+#include <util/u_memory.h>
+
+
+/*
+ * Basic frontend for gallium zink which allows creating mesa context and rendering to
+ * android ANativeWindow using kopper swapchain. Implementation is based on osmesa frontend.
+ * Not implemented: accum formats are not implemented, color formats except RGBA are not implemented.
+ * Context sharing not implemented
+ */
+
+struct zfa_surface
+{
+   struct pipe_frontend_drawable base;
+   struct st_visual visual;
+   struct pipe_resource *textures[ST_ATTACHMENT_COUNT];
+   struct ANativeWindow *window;
+   unsigned width, height;
+};
+
+
+struct zfa_context
+{
+   struct st_context *st;
+   struct zfa_surface *current_surface;
+   enum pipe_format depth_stencil_format;
+};
+
+static struct pipe_frontend_screen *global_fscreen = NULL;
+
+static void
+destroy_st_manager(void)
+{
+   if (global_fscreen) {
+      if (global_fscreen->screen)
+         global_fscreen->screen->destroy(global_fscreen->screen);
+      FREE(global_fscreen);
+   }
+}
+
+static int
+zfa_st_get_param(struct pipe_frontend_screen *fscreen, enum st_manager_param param)
+{
+   return 0;
+}
+
+static void
+create_st_manager(void)
+{
+   if (atexit(destroy_st_manager) != 0)
+      return;
+
+   global_fscreen = CALLOC_STRUCT(pipe_frontend_screen);
+   if (global_fscreen) {
+      global_fscreen->screen = zink_create_screen(NULL, NULL);
+      global_fscreen->get_param = zfa_st_get_param;
+      global_fscreen->get_egl_image = NULL;
+   }
+}
+
+static struct pipe_frontend_screen *
+get_st_manager(void)
+{
+   static once_flag create_once_flag = ONCE_FLAG_INIT;
+
+   call_once(&create_once_flag, create_st_manager);
+
+   return global_fscreen;
+}
+
+static void
+zfa_init_st_visual(struct st_visual *vis,
+                      enum pipe_format color_format,
+                      enum pipe_format ds_format)
+{
+   vis->buffer_mask = ST_ATTACHMENT_FRONT_LEFT_MASK;
+
+   if (ds_format != PIPE_FORMAT_NONE)
+      vis->buffer_mask |= ST_ATTACHMENT_DEPTH_STENCIL_MASK;
+
+   vis->color_format = color_format;
+   vis->depth_stencil_format = ds_format;
+   vis->accum_format = 0;
+   vis->samples = 1;
+}
+
+
+
+static bool
+zfa_st_framebuffer_flush_front(struct st_context *st,
+                                  struct pipe_frontend_drawable *drawable,
+                                  enum st_attachment_type statt)
+{
+   struct zfa_surface *surface = (struct zfa_surface*) drawable;
+   struct pipe_resource *res = surface->textures[statt];
+
+   if (surface->window == NULL)
+      return false;
+
+   if (statt != ST_ATTACHMENT_FRONT_LEFT)
+      return false;
+
+   _mesa_glthread_finish(st->ctx);
+
+   st->pipe->flush_resource(st->pipe, res);
+
+   global_fscreen->screen->flush_frontbuffer(st->screen, st->pipe, res, 0, 0, NULL, 0, NULL);
+   return true;
+}
+
+static bool
+zfa_st_framebuffer_validate(struct st_context *st,
+                               struct pipe_frontend_drawable *drawable,
+                               const enum st_attachment_type *statts,
+                               unsigned count,
+                               struct pipe_resource **out,
+                               struct pipe_resource **resolve)
+{
+   struct pipe_screen *screen = get_st_manager()->screen;
+   enum st_attachment_type i;
+   struct zfa_surface *surface = (struct zfa_surface *)drawable;
+   struct pipe_resource templat;
+
+   memset(&templat, 0, sizeof(templat));
+   templat.target = PIPE_TEXTURE_RECT;
+   templat.format = 0; /* setup below */
+   templat.last_level = 0;
+   templat.width0 = surface->width;
+   templat.height0 = surface->height;
+   templat.depth0 = 1;
+   templat.array_size = 1;
+   templat.usage = PIPE_USAGE_DEFAULT;
+   templat.bind = 0; /* setup below */
+   templat.flags = 0;
+
+   for (i = 0; i < count; i++) {
+      enum pipe_format format = PIPE_FORMAT_NONE;
+      unsigned bind = 0;
+
+      if (statts[i] == ST_ATTACHMENT_FRONT_LEFT) {
+         format = surface->visual.color_format;
+         bind = PIPE_BIND_RENDER_TARGET | PIPE_BIND_DISPLAY_TARGET;
+      }
+      else if (statts[i] == ST_ATTACHMENT_DEPTH_STENCIL) {
+         format = surface->visual.depth_stencil_format;
+         bind = PIPE_BIND_DEPTH_STENCIL | PIPE_BIND_DISPLAY_TARGET;
+      }
+      else {
+         mesa_logw("Unexpected attachment type in zfa_st_framebuffer_validate");
+      }
+
+      templat.format = format;
+      templat.bind = bind;
+
+      pipe_resource_reference(&out[i], NULL);
+
+      if (statts[i] == ST_ATTACHMENT_FRONT_LEFT && surface->window != NULL) {
+         struct kopper_loader_info loader_info = { 0 };
+         VkAndroidSurfaceCreateInfoKHR *create_info = (VkAndroidSurfaceCreateInfoKHR *) &loader_info.bos;
+         create_info->sType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
+         create_info->pNext = NULL;
+         create_info->flags = 0;
+         create_info->window = surface->window;
+         out[i] = surface->textures[statts[i]] =
+            screen->resource_create_drawable(screen, &templat, &loader_info);
+      } else {
+         out[i] = surface->textures[statts[i]] =
+            screen->resource_create(screen, &templat);
+      }
+   }
+
+   return true;
+}
+
+static uint32_t osmesa_fb_ID = 0;
+
+
+static struct zfa_surface *
+zfa_create_surface(struct ANativeWindow *native_window, enum pipe_format color_format,
+                     enum pipe_format ds_format, unsigned width, unsigned height)
+{
+   struct zfa_surface *surface = CALLOC_STRUCT(zfa_surface);
+   if (surface) {
+      surface->window = native_window;
+      surface->width = width;
+      surface->height = height;
+      surface->base.flush_front = zfa_st_framebuffer_flush_front;
+      surface->base.validate = zfa_st_framebuffer_validate;
+      p_atomic_set(&surface->base.stamp, 1);
+      surface->base.ID = p_atomic_inc_return(&osmesa_fb_ID);
+      surface->base.fscreen = get_st_manager();
+      surface->base.visual = &surface->visual;
+
+      zfa_init_st_visual(&surface->visual, color_format,
+                            ds_format);
+   } else {
+      mesa_loge("failed to allocate zfa_surface");
+   }
+
+   return surface;
+}
+
+
+static void
+zfa_destroy_surface(struct zfa_surface *surface)
+{
+
+   st_api_destroy_drawable(&surface->base);
+
+   FREE(surface);
+}
+
+GLAPI ZFAContext GLAPIENTRY
+zfaCreateContext(GLint depth_bits, GLint stencil_bits,
+                        bool api_compat, GLint version_major, GLint version_minor)
+{
+   ZFAContext zfa;
+   enum st_context_error st_error = 0;
+   struct st_context_attribs attribs;
+
+   zfa = CALLOC_STRUCT(zfa_context);
+   if (!zfa) {
+      mesa_loge("Failed to allocate zfa_context");
+      return NULL;
+   }
+
+   if (depth_bits > 0 && stencil_bits > 0) {
+      zfa->depth_stencil_format = PIPE_FORMAT_Z24_UNORM_S8_UINT;
+   }
+   else if (stencil_bits > 0) {
+      zfa->depth_stencil_format = PIPE_FORMAT_S8_UINT;
+   }
+   else if (depth_bits >= 24) {
+      zfa->depth_stencil_format = PIPE_FORMAT_Z24X8_UNORM;
+   }
+   else if (depth_bits >= 16) {
+      zfa->depth_stencil_format = PIPE_FORMAT_Z16_UNORM;
+   }
+
+   memset(&attribs, 0, sizeof(attribs));
+   attribs.profile = api_compat ? API_OPENGL_COMPAT : API_OPENGL_CORE;
+   attribs.major = version_major;
+   attribs.minor = version_minor;
+   attribs.flags = 0;
+   attribs.options.force_glsl_extensions_warn = false;
+   attribs.options.disable_blend_func_extended = false;
+   attribs.options.disable_glsl_line_continuations = false;
+   attribs.options.force_glsl_version = 0;
+
+   zfa_init_st_visual(&attribs.visual,
+                         PIPE_FORMAT_NONE,
+                         zfa->depth_stencil_format);
+
+   zfa->st = st_api_create_context(get_st_manager(),
+                                         &attribs, &st_error, NULL);
+   if (!zfa->st) {
+      FREE(zfa);
+      return NULL;
+   }
+
+   zfa->st->frontend_context = zfa;
+
+   return zfa;
+}
+
+GLAPI void GLAPIENTRY
+zfaDestroyContext(ZFAContext zfa)
+{
+   if (zfa) {
+      FREE(zfa->current_surface);
+      st_destroy_context(zfa->st);
+      FREE(zfa);
+   }
+}
+
+GLAPI GLboolean GLAPIENTRY
+zfaMakeCurrent(ZFAContext zfa, struct ANativeWindow *native_window, GLsizei width, GLsizei height)
+{
+   if (!zfa || width < 1 || height < 1) {
+      mesa_loge("MakeCurrent: invalid arguments");
+      return GL_FALSE;
+   }
+
+   if (zfa->current_surface && (zfa->current_surface->window != native_window
+         || zfa->current_surface->width != width || zfa->current_surface->height != height)) {
+      zfa_destroy_surface(zfa->current_surface);
+      zfa->current_surface = NULL;
+   }
+
+   if (!zfa->current_surface) {
+      zfa->current_surface = zfa_create_surface(native_window, PIPE_FORMAT_R8G8B8A8_UNORM,
+                                      zfa->depth_stencil_format,
+                                      width,
+                                      height);
+   }
+
+   if (!zfa->current_surface) {
+      mesa_loge("MakeCurrent: surface is null");
+      return GL_FALSE;
+   }
+
+   return st_api_make_current(zfa->st, &zfa->current_surface->base, &zfa->current_surface->base);
+}
+
+GLAPI void GLAPIENTRY
+zfaFlushFront(void)
+{
+   struct st_context *st = st_api_get_current();
+   if (!st) {
+      mesa_loge("FlushFront: no context current");
+      return;
+   }
+   ZFAContext zfa = st->frontend_context;
+   struct zfa_surface *surface = zfa->current_surface;
+   struct pipe_resource *res = surface->textures[ST_ATTACHMENT_FRONT_LEFT];
+
+   _mesa_glthread_finish(st->ctx);
+
+   st->pipe->flush_resource(st->pipe, res);
+   st->pipe->flush(st->pipe, NULL, 0);
+
+   global_fscreen->screen->flush_frontbuffer(st->screen, st->pipe, res, 0, 0, NULL, 0, NULL);
+}
\ No newline at end of file
diff --git a/src/gallium/meson.build b/src/gallium/meson.build
index 68f19d0d5dc..cee07ee06b4 100644
--- a/src/gallium/meson.build
+++ b/src/gallium/meson.build
@@ -233,6 +233,10 @@ if with_osmesa
   subdir('frontends/osmesa')
   subdir('targets/osmesa')
 endif
+if with_zfa
+  subdir('frontends/zfa')
+  subdir('targets/zfa')
+endif
 if with_gallium_xa
   subdir('frontends/xa')
   subdir('targets/xa')
diff --git a/src/gallium/targets/osmesa/meson.build b/src/gallium/targets/osmesa/meson.build
index 3c371616e7e..bec89dea1af 100644
--- a/src/gallium/targets/osmesa/meson.build
+++ b/src/gallium/targets/osmesa/meson.build
@@ -38,7 +38,7 @@ libosmesa = shared_library(
     libmesa, libgallium, libws_null, osmesa_link_with,
   ],
   dependencies : [
-    dep_ws2_32, dep_thread, dep_clock, dep_unwind, driver_swrast, idep_mesautil,
+    dep_ws2_32, dep_thread, dep_clock, dep_unwind, idep_mesautil, driver_zink
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : [],  # otherwise mingw will create libosmesa.dll
   soversion : host_machine.system() == 'windows' ? '' : '8',
diff --git a/src/gallium/targets/zfa/meson.build b/src/gallium/targets/zfa/meson.build
new file mode 100644
index 00000000000..9b22cb73db3
--- /dev/null
+++ b/src/gallium/targets/zfa/meson.build
@@ -0,0 +1,23 @@
+zfa_link_with = []
+
+if with_shared_glapi
+    zfa_link_with += libglapi
+endif
+
+libzfa = shared_library(
+    'zfa',
+    'zfa_target.c',
+    gnu_symbol_visibility : 'hidden',
+    link_args : [ld_args_gc_sections],
+    include_directories : [
+        inc_include, inc_src, inc_gallium, inc_gallium_aux,
+        inc_gallium_drivers,
+    ],
+    link_whole : [libzfa_st, libglapi_static],
+    link_with : [
+        libmesa, libgallium, zfa_link_with
+    ],
+    dependencies : [
+            driver_zink
+    ],
+)
\ No newline at end of file
diff --git a/src/gallium/targets/zfa/zfa_target.c b/src/gallium/targets/zfa/zfa_target.c
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/src/util/os_misc.c b/src/util/os_misc.c
index 4b7916634b3..b814d62ed6d 100644
--- a/src/util/os_misc.c
+++ b/src/util/os_misc.c
@@ -213,11 +213,11 @@ const char *
 os_get_option(const char *name)
 {
    const char *opt = getenv(name);
-#if DETECT_OS_ANDROID
-   if (!opt) {
-      opt = os_get_android_option(name);
-   }
-#endif
+// #if DETECT_OS_ANDROID
+//    if (!opt) {
+//       opt = os_get_android_option(name);
+//    }
+// #endif
    return opt;
 }
 
